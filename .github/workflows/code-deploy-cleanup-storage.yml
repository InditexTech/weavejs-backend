name: Build / Cleanup Storage Image

on:
  workflow_dispatch:
    inputs:
      BASELINE:
        description: "Baseline branch"
        required: true
        default: "main"
      ENVIRONMENT:
        description: "Deploy environment"
        required: true
        type: choice
        options:
          - azure-develop
          - azure-development
          - azure-pro
          - azure-production
        default: "azure-pro"

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build Cleanup Storage Image
    runs-on: ubuntu-24.04
    environment: ${{ github.event.inputs.ENVIRONMENT && github.event.inputs.ENVIRONMENT || 'azure-develop' }}
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_ACR_USERNAME: ${{ secrets.AZURE_ACR_USERNAME }}
      AZURE_ACR_NAME: ${{ vars.AZURE_ACR_NAME }}
      AZURE_CONTAINER_ENVIRONMENT_NAME: ${{ vars.AZURE_CONTAINER_ENVIRONMENT_NAME }}
      AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
      AZURE_CONTAINER_NAME: "weavejs-cleanup-storage"
      AZURE_IDENTITY_ID: ${{ secrets.AZURE_IDENTITY_ID }}
      AZURE_STORAGE_ACCOUNT_NAME: ${{ vars.AZURE_STORAGE_ACCOUNT_NAME }}
      AZURE_STORAGE_ROOMS_CONTAINER_NAME: ${{ vars.AZURE_STORAGE_ROOMS_CONTAINER_NAME }}
      AZURE_STORAGE_IMAGES_CONTAINER_NAME: ${{ vars.AZURE_STORAGE_IMAGES_CONTAINER_NAME }}
      AZURE_STORAGE_CLEANUP_DRY_RUN: ${{ vars.AZURE_STORAGE_CLEANUP_DRY_RUN }}
      DO_CLEANUP: ${{ vars.DO_CLEANUP }}
      LOG_LEVEL: ${{ vars.LOG_LEVEL }}
    steps:
      - name: Get input parameters
        run: |
          ENVIRONMENT=${{ github.event.inputs.ENVIRONMENT && github.event.inputs.ENVIRONMENT || 'azure-develop' }}
          echo "ENVIRONMENT=${ENVIRONMENT}" >> "$GITHUB_ENV"
          BASELINE_BRANCH=${{ github.event.inputs.BASELINE || 'main' }}
          echo "BASELINE_BRANCH=${BASELINE_BRANCH#refs/heads/}" >> "$GITHUB_ENV"

      - name: Checkout merge commit
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BASELINE_BRANCH }}
          fetch-depth: 0
          persist-credentials: false

      - name: Create .env.production file
        working-directory: cleanup-storage
        run: |
          touch .env
          echo AZURE_STORAGE_ACCOUNT_NAME="${{ env.AZURE_STORAGE_ACCOUNT_NAME }}" >> .env
          echo AZURE_STORAGE_ROOMS_CONTAINER_NAME=${{ env.AZURE_STORAGE_ROOMS_CONTAINER_NAME }} >> .env
          echo AZURE_STORAGE_IMAGES_CONTAINER_NAME=${{ env.AZURE_STORAGE_IMAGES_CONTAINER_NAME }} >> .env
          echo DO_CLEANUP=${{ env.DO_CLEANUP }} >> .env
          echo DRY_RUN=${{ env.AZURE_STORAGE_CLEANUP_DRY_RUN }} >> .env
          echo LOG_LEVEL=${{ env.LOG_LEVEL }} >> .env

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: ACR Login
        run: |
          ACR_PASSWORD=$(az acr login --name ${{ env.AZURE_ACR_NAME }} --expose-token --output tsv --query accessToken)
          echo "AZURE_ACR_PASSWORD=$(echo $ACR_PASSWORD)" >> $GITHUB_ENV

      - name: ACR Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AZURE_ACR_NAME }}.azurecr.io
          username: ${{ env.AZURE_ACR_USERNAME }}
          password: ${{ env.AZURE_ACR_PASSWORD }}

      - name: Build image and push it to ACR
        uses: docker/build-push-action@v6
        with:
          push: true
          platforms: linux/amd64
          context: cleanup-storage
          tags: ${{ env.AZURE_ACR_NAME }}.azurecr.io/${{ env.AZURE_CONTAINER_NAME }}-${{ env.ENVIRONMENT }}:latest
          file: cleanup-storage/Dockerfile
